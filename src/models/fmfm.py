# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/models/models.fmfm.ipynb (unless otherwise specified).

__all__ = ['FmFM']

# Cell
import torch
from torch import nn

from .layers.embedding import EmbeddingLayer
from .layers.common import LR_Layer

from .bases.ctr import CTRModel

# Cell
class FmFM(CTRModel):
    def __init__(self,
                 feature_map,
                 model_id="FmFM",
                 task="binary_classification",
                 learning_rate=1e-3,
                 embedding_initializer="torch.nn.init.normal_(std=1e-4)",
                 embedding_dim=10,
                 regularizer=None,
                 field_interaction_type="matrixed",
                 **kwargs):
        super(FmFM, self).__init__(feature_map,
                                           model_id=model_id,
                                           **kwargs)
        self.embedding_layer = EmbeddingLayer(feature_map, embedding_dim)
        self.embedding_dim = embedding_dim
        self.num_fields = feature_map.num_fields
        self.interact_dim = int(self.num_fields * (self.num_fields - 1) / 2)
        self.field_interaction_type = field_interaction_type
        if self.field_interaction_type == "vectorized":
            self.interaction_weight = nn.Parameter(torch.Tensor(self.interact_dim, embedding_dim))
        elif self.field_interaction_type == "matrixed":
            self.interaction_weight = nn.Parameter(torch.Tensor(self.interact_dim, embedding_dim, embedding_dim))
        nn.init.xavier_normal_(self.interaction_weight)
        self.triu_index = torch.triu(torch.ones(self.num_fields, self.num_fields), 1).nonzero().to(self.device)
        self.lr_layer = LR_Layer(feature_map, output_activation=None)
        self.output_activation = self.get_final_activation(task)
        self.init_weights(embedding_initializer=embedding_initializer)

    def forward(self, inputs):
        feature_emb = self.embedding_layer(inputs)
        left_emb = torch.index_select(feature_emb, 1, self.triu_index[:, 0])
        right_emb = torch.index_select(feature_emb, 1, self.triu_index[:, 1])
        if self.field_interaction_type == "vectorized":
            left_emb = left_emb * self.interaction_weight
        elif self.field_interaction_type == "matrixed":
            left_emb = torch.matmul(left_emb.unsqueeze(2), self.interaction_weight).squeeze(2)
        y_pred = (left_emb * right_emb).sum(dim=-1).sum(dim=-1, keepdim=True)
        y_pred += self.lr_layer(inputs)
        if self.output_activation is not None:
            y_pred = self.output_activation(y_pred)
        return y_pred