# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/models/models.ffm.ipynb (unless otherwise specified).

__all__ = ['FFM', 'FieldAwareFactorizationMachine', 'FFM_v2']

# Cell
import torch
from torch import nn

from .layers.embedding import EmbeddingLayer
from .layers.common import LR_Layer

from .bases.ctr import CTRModel

# Cell
class FFM(CTRModel):
    def __init__(self,
                 feature_map,
                 model_id="FFM",
                 task="binary_classification",
                 learning_rate=1e-3,
                 embedding_initializer="torch.nn.init.normal_(std=1e-4)",
                 embedding_dim=2,
                 regularizer=None,
                 **kwargs):
        super(FFM, self).__init__(feature_map,
                                           model_id=model_id,
                                           **kwargs)
        self.num_fields = feature_map.num_fields
        self.lr_layer = LR_Layer(feature_map, output_activation=None, use_bias=True)
        self.embedding_layers = nn.ModuleList([EmbeddingLayer(feature_map, embedding_dim)
                                               for x in range(self.num_fields - 1)]) # (F - 1) x F x bs x dim
        self.output_activation = self.get_final_activation(task)
        self.init_weights(embedding_initializer=embedding_initializer)

    def forward(self, inputs):
        lr_out = self.lr_layer(inputs)
        field_wise_emb_list = [each_layer(inputs) for each_layer in self.embedding_layers] # (F - 1) list of bs x F x d
        ffm_out = self.ffm_interaction(field_wise_emb_list)
        y_pred = lr_out + ffm_out
        if self.output_activation is not None:
            y_pred = self.output_activation(y_pred)
        return y_pred

    def ffm_interaction(self, field_wise_emb_list):
        dot = 0
        for i in range(self.num_fields - 1):
            for j in range(i + 1, self.num_fields):
                v_ij = field_wise_emb_list[j - 1][:, i, :]
                v_ji = field_wise_emb_list[i][:, j, :]
                dot += torch.sum(v_ij * v_ji, dim=1, keepdim=True)
        return dot

# Cell
import numpy as np
import torch

from .layers.common import FeaturesLinear

# Cell
class FieldAwareFactorizationMachine(torch.nn.Module):

    def __init__(self, field_dims, embed_dim):
        super().__init__()
        self.num_fields = len(field_dims)
        self.embeddings = torch.nn.ModuleList([
            torch.nn.Embedding(sum(field_dims), embed_dim) for _ in range(self.num_fields)
        ])
        self.offsets = np.array((0, *np.cumsum(field_dims)[:-1]), dtype=np.long)
        for embedding in self.embeddings:
            torch.nn.init.xavier_uniform_(embedding.weight.data)

    def forward(self, x):
        """
        :param x: Long tensor of size ``(batch_size, num_fields)``
        """
        x = x + x.new_tensor(self.offsets).unsqueeze(0)
        xs = [self.embeddings[i](x) for i in range(self.num_fields)]
        ix = list()
        for i in range(self.num_fields - 1):
            for j in range(i + 1, self.num_fields):
                ix.append(xs[j][:, i] * xs[i][:, j])
        ix = torch.stack(ix, dim=1)
        return ix

class FFM_v2(torch.nn.Module):
    """
    A pytorch implementation of Field-aware Factorization Machine.
    Reference:
        Y Juan, et al. Field-aware Factorization Machines for CTR Prediction, 2015.
    """

    def __init__(self, field_dims, embed_dim):
        super().__init__()
        self.linear = FeaturesLinear(field_dims)
        self.ffm = FieldAwareFactorizationMachine(field_dims, embed_dim)

    def forward(self, x):
        """
        :param x: Long tensor of size ``(batch_size, num_fields)``
        """
        ffm_term = torch.sum(torch.sum(self.ffm(x), dim=1), dim=1, keepdim=True)
        x = self.linear(x) + ffm_term
        return torch.sigmoid(x.squeeze(1))