"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4560],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(h,o(o({ref:t},u),{},{components:r})):n.createElement(h,o({ref:t},u))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},53858:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},assets:function(){return u},toc:function(){return p},default:function(){return m}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),o=["components"],l={title:"Finding Hardware Parts in Warehouse",authors:"sparsh",tags:["nlp","similarity"]},s="Problem Statement",c={permalink:"/blog/2021/10/01/finding-hardware-parts-in-warehouse",editUrl:"https://github.com/recohut/docs/blog/blog/2021-10-01-finding-hardware-parts-in-warehouse.mdx",source:"@site/blog/2021-10-01-finding-hardware-parts-in-warehouse.mdx",title:"Finding Hardware Parts in Warehouse",description:"Imagine a customer visits a store to buy hardware parts (e.g. a PVC  pipe or a concrete block) and describe the requirements in a natural language like 'I need 2\" x 5\" concrete block' but the exact description of this part might be different in the seller's database e.g. 'concrete block solid of width 2 inch and height 5 inches'. So the objective is to build a system that will help the store owner to find and offer the right item from the database for the description given by the customer.",date:"2021-10-01T00:00:00.000Z",formattedDate:"October 1, 2021",tags:[{label:"nlp",permalink:"/blog/tags/nlp"},{label:"similarity",permalink:"/blog/tags/similarity"}],readingTime:1.35,truncated:!1,authors:[{name:"Sparsh Agarwal",title:"Principal Developer",url:"https://github.com/sparsh-ai",imageURL:"https://avatars.githubusercontent.com/u/62965911?v=4",key:"sparsh"}],prevItem:{title:"Fake Voice Detection",permalink:"/blog/2021/10/01/fake-voice-detection"},nextItem:{title:"Image Similarity System",permalink:"/blog/2021/10/01/image-similarity-system"}},u={authorsImageUrls:[void 0]},p=[{value:"Data Description",id:"data-description",children:[],level:3},{value:"Modeling",id:"modeling",children:[],level:3},{value:"Algorithm",id:"algorithm",children:[],level:3}],d={toc:p};function m(e){var t=e.components,l=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Imagine a customer visits a store to buy hardware parts (e.g. a PVC  pipe or a concrete block) and describe the requirements in a natural language like ",(0,a.kt)("inlineCode",{parentName:"p"},"'I need 2\" x 5\" concrete block'")," but the exact description of this part might be different in the seller's database e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"'concrete block solid of width 2 inch and height 5 inches'"),". So the objective is to build a system that will help the store owner to find and offer the right item from the database for the description given by the customer. "),(0,a.kt)("h1",{id:"proposed-solution"},"Proposed Solution"),(0,a.kt)("p",null,"Semantic text similarity to map the queries. Bag-of-words based Count vectorizer model with different types of tokenization process and n-gram range. "),(0,a.kt)("h1",{id:"modeling-approach"},"Modeling Approach"),(0,a.kt)("h3",{id:"data-description"},"Data Description"),(0,a.kt)("p",null,"Data 1 - Core training data with 2 columns - Part ID and Description, to find top similar queries"),(0,a.kt)("p",null,"Data 2 - Lookup data to find the top most similar query"),(0,a.kt)("p",null,"Data 3 - Lookup data to fetch the exact description if description is exactly matching in the database"),(0,a.kt)("p",null,"Data 4 - List of keywords for a tokenizer"),(0,a.kt)("p",null,"Data 5 - List of substitutions for more accurate similarity"),(0,a.kt)("p",null,"Data 6 - Test data with 2 columns - Description and part ID (optional)"),(0,a.kt)("h3",{id:"modeling"},"Modeling"),(0,a.kt)("p",null,"Count vectorizer models"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Unigram, Bigram and Trigram tokens"),(0,a.kt)("li",{parentName:"ul"},"Non-alphabet tokens"),(0,a.kt)("li",{parentName:"ul"},"Keyword tokens"),(0,a.kt)("li",{parentName:"ul"},"M1 - Text similarity model trained on small file"),(0,a.kt)("li",{parentName:"ul"},"M2 - Text similarity model trained on large file"),(0,a.kt)("li",{parentName:"ul"},"M3 - Text similarity model trained on mixed file")),(0,a.kt)("h3",{id:"algorithm"},"Algorithm"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"1-gram and 2-gram tokenization"),(0,a.kt)("li",{parentName:"ul"},"Count vectorization"),(0,a.kt)("li",{parentName:"ul"},"Cosine or Euclidean distance")),(0,a.kt)("h1",{id:"final-repository-structure"},"Final Repository Structure"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"/img/content-blog-raw-blog-finding-hardware-parts-in-warehouse-untitled.png",src:r(61784).Z})))}m.isMDXComponent=!0},61784:function(e,t,r){t.Z=r.p+"assets/images/content-blog-raw-blog-finding-hardware-parts-in-warehouse-untitled-e63326b9b08df3878ea1be7dac0b57e7.png"}}]);