"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8511],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return h}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=l(r),h=a,m=d["".concat(p,".").concat(h)]||d[h]||u[h]||o;return r?n.createElement(m,i(i({ref:t},s),{},{components:r})):n.createElement(m,i({ref:t},s))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},23725:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],c={},p="BigGraph",l={unversionedId:"models/biggraph",id:"models/biggraph",title:"BigGraph",description:"PyTorch-BigGraph: A Large-scale Graph Embedding System",source:"@site/docs/models/biggraph.mdx",sourceDirName:"models",slug:"/models/biggraph",permalink:"/docs/models/biggraph",editUrl:"https://github.com/sparsh-ai/ml-utils/docs/models/biggraph.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BiasOnly",permalink:"/docs/models/biasonly"},next:{title:"BPR",permalink:"/docs/models/bpr"}},s=[],u={toc:s};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"biggraph"},"BigGraph"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"PyTorch-BigGraph: A Large-scale Graph Embedding System")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebookresearch/PyTorch-BigGraph"},"PyTorch BigGraph"),"\xa0handles the second approach, and we will do so as well below. Just for reference let\u2019s talk about the size aspect for a second. Graphs are usually encoded by their\xa0",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Adjacency_matrix"},"adjacency matrix"),". If you have a graph with 3,000 nodes and an edge between each node, you end up with around 10,000,000 entries in your matrix. Even if that\u2019s sparse, apparently this bursts most GPUs according to\xa0",(0,o.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1609.02907"},"the paper"),"\xa0linked above. If\xa0you think about the usual graphs used in recommendation systems, you\u2019ll realize they are typically much larger than that."),(0,o.kt)("p",null,"BigGraph is made to work around the memory limit of machines, so it\u2019s completely file based. You\u2019ll have to trigger processes to create the appropriate file structure. And if you want run an example again, you\u2019ll have to delete the checkpoints."))}d.isMDXComponent=!0}}]);