"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3484],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return p}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),f=u(t),p=o,m=f["".concat(c,".").concat(p)]||f[p]||l[p]||a;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},84614:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return d},default:function(){return f}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],s={},c="MongoDB to CSV conversion",u={unversionedId:"tutorials/mongodb-csv-conversion",id:"tutorials/mongodb-csv-conversion",title:"MongoDB to CSV conversion",description:"Pull a noSQL data from MongoDB and convert into Pandas dataframe",source:"@site/docs/tutorials/mongodb-csv-conversion.mdx",sourceDirName:"tutorials",slug:"/tutorials/mongodb-csv-conversion",permalink:"/docs/tutorials/mongodb-csv-conversion",editUrl:"https://github.com/recohut/docs/docs/docs/tutorials/mongodb-csv-conversion.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"xDeepFM",permalink:"/docs/models/xdeepfm"},next:{title:"PDF to WordCloud via Email",permalink:"/docs/tutorials/pdf-to-wordcloud-mail"}},d=[],l={toc:d};function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mongodb-to-csv-conversion"},"MongoDB to CSV conversion"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Pull a noSQL data from MongoDB and convert into Pandas dataframe")),(0,a.kt)("a",{href:"https://nbviewer.org/github/recohut/nbs/blob/main/2020-06-20-mongodb-to-csv-conversion.ipynb",alt:""}," ",(0,a.kt)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import pymongo as pm\nfrom pymongo import MongoClient\nimport numpy as np\nimport pandas as pd\nfrom pandas.io.json import json_normalize\n\ndef _connect_mongo(username, password, host, port, db):\n    mongo_uri = 'mongodb://%s:%s@%s:%s/%s' % (username, password, host, port, db)\n    conn = MongoClient(mongo_uri, serverSelectionTimeoutMS=5000, ssl=True)\n    return conn[db] \n\ndb = _connect_mongo('xxxx', 'xxxx', 'xxxx', xxxx, 'xxxx')\ncollection = db['xxxx']\ntest = pd.DataFrame(list(collection.find({}, {\"var1\":1, \"var2\":1})))\nprint(test.info())\n\n# Extracting Non-array data\nwith open('non_array_features.txt') as f:\n    content = f.readlines()\nnon_array_features = [x.strip() for x in content]\n\nquery = \"\"\nfor x in non_array_features:\n    query+='\"'+ x + '\":1, '\nquery = query[:-2]\n\nflat_df = json_normalize(list(collection.find({}, {<paste query string here without ''>})))\nflat_df.shape\n\n# Extracting Array data\ndef extract_array(feature, key, val):\n    n1 = pd.DataFrame(list(collection.aggregate([{\"$unwind\" : \"$\"+str(feature)}, \n                                        {\"$project\" : {'key' : \"$\"+str(feature) + \".\" + key,\n                                                       'value' : \"$\"+str(feature) + \".\" + val}}])))\n    n2 = n1[~n1['_id'].astype(str).str.contains('timestamp', regex=False)]\n    n3 = n2[~n2.set_index(['_id','key'])['value'].index.duplicated(keep='first')]\n    n4 = n3.set_index(['_id','key'])['value'].unstack().add_suffix('_').reset_index()\n    return n4\n\n\n'''https://stackoverflow.com/questions/51402430/concatenate-columns-with-same-id-pandas-dataframe'''\ndef collide_me(x):\n    x = x[~x['_id'].astype(str).str.contains('timestamp', regex=False)]\n    y = (x.set_index(['_id', x.groupby(['_id']).cumcount()]).unstack().sort_index(axis=1, level=1))\n    y.columns = ['{}_{}'.format(i, j) for i, j in y.columns]\n    y = y.reset_index()\n    return y\n\ndef extract_ndarray(df, key, value):\n    n1 = df[['_id', key, value]]\n    n2 = n1[~n1['_id'].astype(str).str.contains('timestamp', regex=False)]\n    n3 = n2[~n2.set_index(['_id',key])[value].index.duplicated(keep='first')]\n    n4 = n3.set_index(['_id',key])[value].unstack().add_prefix(key+'_').reset_index()\n    return n4\n\n# Key-value feature extraction\naf1 = extract_array('array_feature_1', 'key', 'value')\naf2 = extract_array('array_feature_2', 'key', 'value')\n\n# Key-multivalue feature extraction\naf3 = pd.DataFrame(list(collection.aggregate([{\"$unwind\" : \"$array_feature_3\"}, \n                                        {\"$project\" : {'featurename_31':'$array_feature_3.featurename_31',\n                                                       'featurename_32':'$array_feature_3.featurename_32',\n                                                       'featurename_33':'$array_feature_3.featurename_33'\n                                                      }}])))\naf3 = collide_me(af3)\n\n# Key-value multi-dimensional feature extraction\naf4 = json_normalize(list(collection.aggregate([{\"$unwind\": '$array_feature_4'},\n                                        {\"$project\" : {'feature41':'$array_feature_4.feature41'}}\n                                        ,{\"$unwind\": '$responses'}\n                                        ,{\"$project\" : {'feature41_key':'$feature41.key',\n                                                        'feature41_value':'$feature41.value'}}\n                                       ])))\n\naf4 = extract_ndarray(af4, 'feature41_key', 'feature41_value')\n\n# Joining and exporting data\ndf = pd.merge(flat_df, af1, on='_id', how='outer')\ndf = pd.merge(df, af2, on='_id', how='outer')\ndf = pd.merge(df, af3, on='_id', how='outer')\ndf = pd.merge(df, af4, on='_id', how='outer')\ndf.to_csv('mongoDB_to_CSV_converted.csv')\n")))}f.isMDXComponent=!0}}]);