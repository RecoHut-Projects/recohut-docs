"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9852],{3905:function(e,a,t){t.d(a,{Zo:function(){return o},kt:function(){return N}});var n=t(67294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function m(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=n.createContext({}),l=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):m(m({},a),e)),t},o=function(e){var a=l(e.components);return n.createElement(i.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},h=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),h=l(t),N=s,k=h["".concat(i,".").concat(N)]||h[N]||c[N]||r;return t?n.createElement(k,m(m({ref:a},o),{},{components:t})):n.createElement(k,m({ref:a},o))}));function N(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=t.length,m=new Array(r);m[0]=h;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p.mdxType="string"==typeof e?e:s,m[1]=p;for(var l=2;l<r;l++)m[l]=t[l];return n.createElement.apply(null,m)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},30986:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return l},toc:function(){return o},default:function(){return h}});var n=t(87462),s=t(63366),r=(t(67294),t(3905)),m=["components"],p={},i="DeepWalk",l={unversionedId:"models/deepwalk",id:"models/deepwalk",title:"DeepWalk",description:"DeepWalk learns representations of online social networks graphs. By performing random walks to generate sequences, the paper demonstrated that it was able to learn vector representations of nodes (e.g., profiles, content) in the graph.",source:"@site/docs/models/deepwalk.mdx",sourceDirName:"models",slug:"/models/deepwalk",permalink:"/docs/models/deepwalk",editUrl:"https://github.com/recohut/docs/docs/docs/models/deepwalk.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DeepFM",permalink:"/docs/models/deepfm"},next:{title:"DGTN",permalink:"/docs/models/dgtn"}},o=[{value:"<strong>The DeepWalk process operates in a few steps</strong>",id:"the-deepwalk-process-operates-in-a-few-steps",children:[],level:3},{value:"Let&#39;s see how it works in depth",id:"lets-see-how-it-works-in-depth",children:[],level:3},{value:"What does it look like in code?",id:"what-does-it-look-like-in-code",children:[],level:3},{value:"Links",id:"links",children:[],level:2}],c={toc:o};function h(e){var a=e.components,p=(0,s.Z)(e,m);return(0,r.kt)("wrapper",(0,n.Z)({},c,p,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"deepwalk"},"DeepWalk"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://arxiv.org/abs/1403.6652"},"DeepWalk")," learns representations of online social networks graphs. By performing random walks to generate sequences, the paper demonstrated that it was able to learn vector representations of nodes (e.g., profiles, content) in the graph."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"/img/content-models-raw-mp2-deepwalk-untitled.png",src:t(26237).Z})),(0,r.kt)("h3",{id:"the-deepwalk-process-operates-in-a-few-steps"},(0,r.kt)("strong",{parentName:"h3"},"The DeepWalk process operates in a few steps")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"For each node, perform N \u201crandom steps\u201d starting from that node"),(0,r.kt)("li",{parentName:"ol"},"Treat each walk as a sequence of node-id strings"),(0,r.kt)("li",{parentName:"ol"},"Given a list of these sequences, train a word2vec model using the Skip-Gram algorithm on these string sequences")),(0,r.kt)("h3",{id:"lets-see-how-it-works-in-depth"},"Let's see how it works in depth"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"node embedding learned in an unsupervised manner")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"/img/content-models-raw-mp2-deepwalk-untitled-1.png",src:t(47368).Z})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"highly resembles word embedding in terms of the training process"),(0,r.kt)("li",{parentName:"ul"},"motivation is that the distribution of both nodes in a graph and words in a corpus follow a power law","  ",(0,r.kt)("img",{alt:"/img/content-models-raw-mp2-deepwalk-untitled-2.png",src:t(72247).Z})),(0,r.kt)("li",{parentName:"ul"},"The algorithm contains ",(0,r.kt)("strong",{parentName:"li"},"two steps"),": 1) Perform random walks on nodes in a graph to generate node sequences, 2) Run skip-gram to learn the embedding of each node based on the node sequences generated in step 1","  ",(0,r.kt)("img",{alt:"Different colors indicate different labels",src:t(52364).Z}),"  Different colors indicate different labels\n"),(0,r.kt)("li",{parentName:"ul"},"However, the main issue with DeepWalk is that it lacks the ability to generalize. Whenever a new node comes in, it has to re-train the model in order to represent this node (transductive). Thus, such GNN is not suitable for dynamic graphs where the nodes in the graphs are ever-changing.")),(0,r.kt)("p",null,"The key idea is that the techniques which have been used to model natural language (where the symbol frequency follows a power law distribution (or Zipf \u2019s law)) can be repurposed to model community structure in networks. In this model, we generalizes the concept of language modeling to explore the graph through a stream of short random walks. These walks can be thought of short sentences and phrases in a special language. The direct analog is to estimate the likelihood of observing vertex ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"v"),(0,r.kt)("mi",{parentName:"msub"},"i"))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"v_i")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5806em",verticalAlign:"-0.15em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"}))))))))))," given all the previous vertices visited so far in the random walk."),(0,r.kt)("p",null,(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"P"),(0,r.kt)("mi",{parentName:"msub"},"r")),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"v"),(0,r.kt)("mi",{parentName:"msub"},"i")),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"v"),(0,r.kt)("mn",{parentName:"msub"},"1")),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"v"),(0,r.kt)("mn",{parentName:"msub"},"2")),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"."),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("msub",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msub"},"v"),(0,r.kt)("mrow",{parentName:"msub"},(0,r.kt)("mi",{parentName:"mrow"},"i"),(0,r.kt)("mo",{parentName:"mrow"},"\u2212"),(0,r.kt)("mn",{parentName:"mrow"},"1"))),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"P_r(v_i \\vert (v_1,v_2,...,v_{i-1}))")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.1514em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.1389em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"r")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u2223"),(0,r.kt)("span",{parentName:"span",className:"mopen"},"("),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"2")))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"..."),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3117em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"i"),(0,r.kt)("span",{parentName:"span",className:"mbin mtight"},"\u2212"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.2083em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mclose"},"))")))))),(0,r.kt)("p",null,"But since our goal is to learn a latent representation, not only a probability distribution of node co-occurrences, so we use a mapping function ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u03a6"),(0,r.kt)("mo",{parentName:"mrow"},":"),(0,r.kt)("mi",{parentName:"mrow"},"v"),(0,r.kt)("mo",{parentName:"mrow"},"\u2208"),(0,r.kt)("mi",{parentName:"mrow"},"V"),(0,r.kt)("mo",{parentName:"mrow"},"\u2192"),(0,r.kt)("msup",{parentName:"mrow"},(0,r.kt)("mi",{parentName:"msup",mathvariant:"double-struck"},"R"),(0,r.kt)("mrow",{parentName:"msup"},(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),(0,r.kt)("mi",{parentName:"mrow"},"V"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),(0,r.kt)("mo",{parentName:"mrow"},"\xd7"),(0,r.kt)("mi",{parentName:"mrow"},"d")))),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\u03a6: v \u2208 V \\rightarrow \\mathbb{R}^{|V|\xd7d}")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u03a6"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},":"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.5782em",verticalAlign:"-0.0391em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"v"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2208"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.22222em"}},"V"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2192"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.888em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},(0,r.kt)("span",{parentName:"span",className:"mord mathbb"},"R"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.888em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"\u2223"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.22222em"}},"V"),(0,r.kt)("span",{parentName:"span",className:"mord mtight"},"\u2223"),(0,r.kt)("span",{parentName:"span",className:"mbin mtight"},"\xd7"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"))))))))))))),". This mapping ",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u03a6")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\u03a6")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u03a6")))))," represents the latent social representation associated with each vertex v in the graph. The problem then, is to estimate the likelihood:"),(0,r.kt)("p",null,"$",(0,r.kt)("span",{parentName:"p",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex-error",title:"ParseError: KaTeX parse error: Can't use function '$' in math mode at position 48: \u2026, \u03a6(v_{i\u22121}))) $\u0332",style:{color:"#cc0000"}},"Pr(v_i | (\u03a6(v_1), \u03a6(v_2), \xb7 \xb7 \xb7 , \u03a6(v_{i\u22121}))) $"))),(0,r.kt)("p",null,"Although as the walk length grows, computing this objective function becomes un-feasible, skip-gram concept in language modeling can be employed to solve this problem. First, instead of using the context to predict a missing word, it uses one word to predict the context. Secondly, the context is composed of the words appearing to right side of the given word as well as the left side. Finally, it removes the ordering constraint on the problem. Instead, the model is required to maximize the probability of any word appearing in the context without the knowledge of its offset from the given word."),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("center",null,(0,r.kt)("img",{src:"https://github.com/recohut/graph-embeddings/raw/3ae14e9b7e26389dede9d33d96465a674b8acd21/docs/_images/C870584_1.png"}),(0,r.kt)("figcaption",null,"DeepWalk algorithm")))),(0,r.kt)("p",null,"Below picture explains the process clearly:"),(0,r.kt)("figure",null,(0,r.kt)("p",null,(0,r.kt)("center",null,(0,r.kt)("img",{src:"https://github.com/recohut/graph-embeddings/raw/3ae14e9b7e26389dede9d33d96465a674b8acd21/docs/_images/C870584_2.png"}),(0,r.kt)("figcaption",null,"source - original paper.")))),(0,r.kt)("h3",{id:"what-does-it-look-like-in-code"},"What does it look like in code?"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Instantiate a undirected Networkx graph\nG = nx.Graph()\nG.add_edges_from(list_of_product_copurchase_edges)\n\ndef get_random_walk(graph:nx.Graph, node:int, n_steps:int = 4)->List[str]:\n   """ Given a graph and a node, \n       return a random walk starting from the node \n   """\n   local_path = [str(node),]\n   target_node = node\n   for _ in range(n_steps):\n      neighbors = list(nx.all_neighbors(graph, target_node))\n      target_node = random.choice(neighbors)\n      local_path.append(str(target_node))\n   return local_path\n\nwalk_paths = []\n\nfor node in G.nodes():\n   for _ in range(10):\n      walk_paths.append(get_random_walk(G, node))\n \nwalk_paths[0]\n>>> [\u201810001\u2019, \u201810205\u2019, \u201811845\u2019, \u201810205\u2019, \u201810059\u2019]\n')),(0,r.kt)("p",null,"What these random walks provide to us is a series of strings that act as a path from the start node \u2014 randomly walking from one node to the next down the list. What we do next is we treat this list of strings as a sentence, then utilize these series of strings to train a Word2Vec model:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Instantiate word2vec model\nembedder = Word2Vec(\n   window=4, sg=1, hs=0, negative=10, alpha=0.03, min_alpha=0.0001,    \n   seed=42\n)\n\n# Build Vocabulary\nembedder.build_vocab(walk_paths, progress_per=2)\n\n# Train\nembedder.train(\n   walk_paths, total_examples=embedder.corpus_count, epochs=20, \n   report_delay=1\n)\n")),(0,r.kt)("p",null,"It\u2019s a slight stretch, but here\u2019s the gist of it from the recommendations perspective:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use the product pairs and associated relationships to create a graph"),(0,r.kt)("li",{parentName:"ul"},"Generate sequences from the graph (via\xa0",(0,r.kt)("em",{parentName:"li"},"random walk"),")"),(0,r.kt)("li",{parentName:"ul"},"Learn product embeddings based on the sequences (via\xa0",(0,r.kt)("em",{parentName:"li"},"word2vec"),")"),(0,r.kt)("li",{parentName:"ul"},"Recommend products based on embedding similarity (e.g., cosine similarity, dot product)")),(0,r.kt)("h2",{id:"links"},"Links"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://arxiv.org/abs/1403.6652"},"DeepWalk: Online Learning of Social Representations. arXiv, Jun 2014")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/phanein/deepwalk"},"https://github.com/phanein/deepwalk")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://towardsdatascience.com/deepwalk-its-behavior-and-how-to-implement-it-b5aac0290a15"},"https://towardsdatascience.com/deepwalk-its-behavior-and-how-to-implement-it-b5aac0290a15")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://towardsdatascience.com/introduction-to-graph-neural-networks-with-deepwalk-f5ac25900772"},"https://towardsdatascience.com/introduction-to-graph-neural-networks-with-deepwalk-f5ac25900772")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://www.analyticsvidhya.com/blog/2019/11/graph-feature-extraction-deepwalk/"},"https://www.analyticsvidhya.com/blog/2019/11/graph-feature-extraction-deepwalk/")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/ninoxjy/graph-embedding"},"https://github.com/ninoxjy/graph-embedding")," (2020) ","[Source code]"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/rforgione/deepwalk"},"https://github.com/rforgione/deepwalk")," (2020) ","[Source code]"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/gen3111620/DeepWalk"},"https://github.com/gen3111620/DeepWalk")," (2020) ","[Source code]"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/benedekrozemberczki/karateclub"},"https://github.com/benedekrozemberczki/karateclub")," (2021) ","[Source code]"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/shenweichen/GraphEmbedding"},"https://github.com/shenweichen/GraphEmbedding")," (2020) ","[Source code]")))}h.isMDXComponent=!0},47368:function(e,a,t){a.Z=t.p+"assets/images/content-models-raw-mp2-deepwalk-untitled-1-d559a029ca3abfbf32ca607332d1a0f4.png"},72247:function(e,a,t){a.Z=t.p+"assets/images/content-models-raw-mp2-deepwalk-untitled-2-5475e0a1cfe6e108abe6bf2f444281ee.png"},52364:function(e,a,t){a.Z=t.p+"assets/images/content-models-raw-mp2-deepwalk-untitled-3-05a6b382c653cfba3ca1c70e4755d38a.png"},26237:function(e,a,t){a.Z=t.p+"assets/images/content-models-raw-mp2-deepwalk-untitled-c75ae28900bb4b9be0d4ee72419711db.png"}}]);